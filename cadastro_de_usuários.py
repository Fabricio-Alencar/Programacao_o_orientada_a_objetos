# -*- coding: utf-8 -*-
"""Cadastro de usuários.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16CMGGNhLJFNmb0MyCvD6rwediQ6GAAcc
"""

from datetime import datetime

class CadastroUsuario:
    def __init__(self, nome: str = "None", cpf: str = "None", nascimento: str = "None",
                 endereco: str = "None", telefone: str = "None", senha: str = "None"):
        self.nome = nome
        self.cpf = cpf
        self.nascimento = nascimento
        self.endereco = endereco
        self.telefone = telefone
        self.senha = senha

    def mostrar_info(self):
        if self.validar_gravacao():
            print("\nDados do usuário:")
            info = f'Nome: {self.nome}\nCPF: {self.cpf}\nData de Nascimento: {self.nascimento}\nTelefone: {self.telefone}\nEndereço: {self.endereco}\n'
            print(info)
            print("\n")
            return info
        else:
            print("Não foi possível mostrar as informações. Dado(s) inválido(s)")


    def gravar_info(self):
        if self.validar_gravacao():
            nome_arquivo = f"cadastro_{self.cpf}.txt"
            try:
                with open(nome_arquivo, "w") as arquivo:
                    arquivo.write(f'Nome: {self.nome}\nCPF: {self.cpf}\nData de Nascimento: {self.nascimento}\n')
                    arquivo.write(f'Telefone: {self.telefone}\nEndereço: {self.endereco}')
                    print("Gravação concluída!")
                    print("\n")
                    return True
            except Exception as e:
                print("Erro na gravação das informações:", e)
                return False
        else:
            print("Não foi possível realizar a gravação das informações")
            print("\n")
            return False

    def validar_gravacao(self):
        return all([
            self.validar_nome(),
            self.validar_cpf(),
            self.validar_nascimento(),
            self.validar_endereco(),
            self.validar_telefone(),
            self.validar_senha()
        ])

    def validar_nome(self):
        if " " in self.nome:
            print("Nome válido!")
            return True
        print("Nome inválido!")
        return False

    def validar_cpf(self):
        if len(self.cpf) == 14 and self.cpf[3] == "." and self.cpf[7] == "." and self.cpf[11] == "-":
            print("Formato de CPF válido!")
            return True
        print("Formato de CPF inválido!")
        return False

    def validar_nascimento(self):
        try:
            dia, mes, ano = map(int, self.nascimento.split("/"))
            data_nascimento = datetime(ano, mes, dia)
            if data_nascimento <= datetime.now():
                print("Data de nascimento válida!")
                return True
            else:
                print("Data de nascimento inválida!")
        except ValueError:
            print("Formato de data inválido!")
        return False

    def validar_endereco(self):
        if self.endereco != "None":
            print("Endereço válido!")
            return True
        print("Endereço inválido!")
        return False

    def validar_telefone(self):
        if (self.telefone[0] == "(" and self.telefone[3] == ")" and
            (self.telefone[8] == "-" or self.telefone[9] == "-") and
            len(self.telefone) in [13, 14]):
            print("Formato de Telefone válido!")
            return True
        print("Formato de Telefone inválido!")
        return False

    def validar_senha(self):
        if len(self.senha) == 8:
            print("Senha válida!")
            return True
        print("Senha inválida!")
        return False


usuario1 = CadastroUsuario("Maria José", "234.234.456-99", "22/07/2004", "Criseida", "(55)8765-9876", "12345678")
usuario1.mostrar_info()
usuario1.gravar_info()

usuario2 = CadastroUsuario()
usuario2.mostrar_info()
usuario2.gravar_info()

import pytest
import os
#from Cadastro_de_usuarios import CadastroUsuario

@pytest.fixture
def usuario():
    # Criando um usuário padrão para os testes
    return CadastroUsuario("Maria José", "234.234.456-99", "22/07/2004", "Criseida", "(55)8765-9876", "12345678")

@pytest.fixture
def setup_teardown_arquivo():
    nome_arquivo = "cadastro_234.234.456-99.txt"
    # Remover arquivo antes do teste, caso exista
    if os.path.exists(nome_arquivo):
        os.remove(nome_arquivo)
    yield
    # Remover arquivo após o teste, caso exista
    if os.path.exists(nome_arquivo):
        os.remove(nome_arquivo)

def test_mostrar_info(usuario):
    # Verifica se o método mostrar_info() não retorna erro ao ser chamado
    assert usuario.mostrar_info() is None

def test_gravar_info(usuario, setup_teardown_arquivo):
    # Testa se a gravação das informações do usuário é bem-sucedida
    assert usuario.gravar_info() == "Gravação concluída!"
    # Confirma se o arquivo foi criado
    assert os.path.exists("cadastro_234.234.456-99.txt")

def test_validar_nome(usuario):
    # Testa se o nome é validado corretamente
    assert usuario.validar_nome() is True

def test_validar_cpf(usuario):
    # Testa se o CPF é validado corretamente
    assert usuario.validar_cpf() is True

def test_validar_nascimento(usuario):
    # Testa se a data de nascimento é validada corretamente
    assert usuario.validar_nascimento() is True

def test_validar_telefone(usuario):
    # Testa se o telefone é validado corretamente
    assert usuario.validar_telefone() is True

def test_validar_senha(usuario):
    # Testa se a senha é validada corretamente
    assert usuario.validar_senha() is True

def test_criar_arquivo(usuario, setup_teardown_arquivo):
    # Testa se o arquivo de usuário pode ser criado e verifica seu conteúdo
    usuario.gravar_info()
    with open("cadastro_234.234.456-99.txt", "r") as arquivo:
        conteudo = arquivo.read()
        assert "Nome: Maria José" in conteudo
        assert "CPF: 234.234.456-99" in conteudo
        assert "Data de Nascimento: 22/07/2004" in conteudo

@pytest.mark.parametrize("cpf,resultado", [
    ("234.234.456-99", True),
    ("123.456.789-00", False),  # Formato inválido
    ("234.234.456-9a", False)   # Contém caractere inválido
])
def test_cpf_variados(cpf, resultado):
    usuario = CadastroUsuario(cpf=cpf)
    assert usuario.validar_cpf() == resultado