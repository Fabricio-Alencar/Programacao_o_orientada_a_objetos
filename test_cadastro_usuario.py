# -*- coding: utf-8 -*-
"""test_cadastro_usuario.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_3ueptuoFHSYeSG3FwMjrmCd5hETXq2T
"""

import pytest
import os
#from Cadastro_de_usuarios import CadastroUsuario

@pytest.fixture
def usuario_valido():
    # Criação de um objeto para testes
    return CadastroUsuario("Maria José", "234.234.456-99", "22/07/2004", "Criseida", "(55)8765-9876", "12345678")

def usuario_invalido():
    return CadastroUsuario("João", "23.234.456-99", "22/07/200", "None", "(5)8765-9876", "1234568")

def test_instanciacao(usuario_valido):
    # Teste de instanciação
    assert usuario_valido.nome == "Maria José"
    assert usuario_valido.cpf == "234.234.456-99"
    assert usuario_valido.nascimento == "22/07/2004"
    assert usuario_valido.endereco == "Criseida"
    assert usuario_valido.telefone == "(55)8765-9876"
    assert usuario_valido.senha == "12345678"

def test_validar_nome(usuario_valido,usuario_invalido):
    # Verifica se o nome fornecido é válido
    assert usuario_valido.validar_nome() == True
    assert usuario_invalido.validar_nome() == False

def test_validar_cpf(usuario_valido,usuario_invalido):
    # Verifica se o CPF fornecido é válido
    assert usuario_valido.validar_cpf() == True
    assert usuario_invalido.validar_cpf() == False

def test_validar_nascimento(usuario_valido,usuario_invalido):
    # Verifica se a data fornecida é válida
    assert usuario_valido.validar_nascimento() == True
    assert usuario_invalido.validar_nascimento() == False

def test_validar_telefone(usuario_valido,usuario_invalido):
    # Verifica se o telefone fornecido é válido
    assert usuario_valido.validar_telefone() == True
    assert usuario_invalido.validar_telefone() == False

def test_validar_senha(usuario_valido,usuario_invalido):
    # Verifica se a senha fornecida é válida
    assert usuario_valido.validar_senha() == True
    assert usuario_invalido.validar_senha() == False

def test_mostrar_info(usuario_valido,usuario_invalido):
    # Verifica se os dados fornecidos são válidos
    assert usuario_valido.mostrar_info() == f'Nome: {usuario_valido.nome}\nCPF: {usuario_valido.cpf}\nData de Nascimento: {usuario_valido.nascimento}\nTelefone: {usuario_valido.telefone}\nEndereço: {usuario_valido.endereco}\n'
    assert usuario_invalido.mostrar_info() == False

'''@pytest.fixture
def setup_teardown_arquivo(usuario):
    nome_arquivo = f"cadastro_{usuario.cpf}.txt"
    if os.path.exists(nome_arquivo):
        os.remove(nome_arquivo)
    yield
    if os.path.exists(nome_arquivo):
        os.remove(nome_arquivo)

def test_gravar_info(usuario):
    # Verifica se a gravaçaõ foi feita
    assert usuario.gravar_info() == f'Nome: {usuario.nome}\nCPF: {usuario.cpf}\nData de Nascimento: {usuario.nascimento}\nTelefone: {usuario.telefone}\nEndereço: {usuario.endereco}\n''''

# Esta parte esta incompleta

